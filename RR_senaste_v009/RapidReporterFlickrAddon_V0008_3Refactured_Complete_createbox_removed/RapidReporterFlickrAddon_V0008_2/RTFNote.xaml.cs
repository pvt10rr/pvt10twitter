// This application lets the tester be the master of the session.
//  RTFNote - use for advanced notetaking
///-------

// References and Dependencies
using System;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Media.Effects;

// Scope of the application.
// In this file we deal with the 'RTF Note Widget':
/*
 * +------------------------------------------------------------------------------------+
 * | +--------------------------------------------------------------------------------+ |
 * | | *ABC* aBc /123/                                                                | |
 * | +--------------------------------------------------------------------------------+ |
 * |                                                                       [ Save Note] |
 * +------------------------------------------------------------------------------------+
 */
namespace Rapid_Reporter
{
    // RTFNote controls the little text area to write enhanced notes for the session notes.
    public partial class RTFNote : Window
    {
        public Boolean forceClose = false;  // We keep the window open (although hidden) until the app is closed.
        int currentRTFNote = 1;             // The number of the notes helps putting them in order, and finding them between the files (timestamp alone may confuse people).
        public SMWidget sm;                 // Our interface to toggle the visual of the button in the main window is by direct referencing.
        public string workingDir = Directory.GetCurrentDirectory() + @"\";      // The directory to save files

        // Initialization, and setting focus to the richtextnote area
        public RTFNote()
        {
            Logger.record("[RTFNote]: RTF Note window initializing", "RTFNote", "info");
            InitializeComponent();
            // With the code below we control when to close the window or hide it.
            //  Didn't use a normal 'EventHandler' because we needed the Cancel option to close the window when appropriate.
            this.Closing += new CancelEventHandler(this.RTFNoteDialog_Close);
            Logger.record("[RTFNote]: RTF Note window initialized, including CancelEventHandler", "RTFNote", "info");
        }
        private void RTFNoteDialog_VisibilityChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            Logger.record("[RTFNoteDialog_VisibilityChanged]: RTF Note window visibility changed", "RTFNote", "info");
            RTFNoteDialog_GotFocus();
        }
        private void RTFNoteDialog_GotFocus()
        {
            Logger.record("[RTFNoteDialog_GotFocus]: RTF Note window got focus", "RTFNote", "info");
            this.richTextNote.Focus();
            this.richTextNote.ScrollToEnd(); // Ready to enter new information
        }

        // When a note is cleared, there is no undo!
        private void clean_Click(object sender, RoutedEventArgs e)
        {
            Logger.record("[clean_Click]: RTF Note cleared", "RTFNote", "info");
            richTextNote.Document.Blocks.Clear();
            RTFNoteDialog_GotFocus(); // after we close the button, we're ready to input notes again
        }

        // When the note is 'saved', it get's saved into an RTF file, and marked for being attached to a session note.
        private void save_Click(object sender, RoutedEventArgs e)
        {
            Logger.record("[save_Click]: RTF Note to be saved", "RTFNote", "info");
            bool exDrRetry = false;

            TextRange tr = new TextRange(richTextNote.Document.ContentStart, richTextNote.Document.ContentEnd);
            // How do we kow the '3' minimum? By trial and error. Any character entered in the area makes it go 3+. Empty area is 0<=x<=2
            if (3 <= tr.Text.Length) 
            {
                Logger.record("\t[save_Click]: RTF Note not empty, will save", "RTFNote", "info");
                // Name the note, save to file
                sm.rtfNoteName = currentRTFNote++.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".rtf";
                do
                {
                    exDrRetry = false;
                    try
                    {
                        // Process is:
                        //  1. Save the file
                        //  2. Change the visual cue
                        //  3. Add an autogenerated line to the session CSV

                        // Saves the file
                        FileStream fs = new FileStream(workingDir + sm.rtfNoteName, FileMode.OpenOrCreate, FileAccess.Write);
                        TextRange RTF = new TextRange(richTextNote.Document.ContentStart, richTextNote.Document.ContentEnd);
                        RTF.Save(fs, System.Windows.DataFormats.Rtf);

                        // Set the visual effect to clue the tester there's a note attached
                        BevelBitmapEffect effect = new BevelBitmapEffect();
                        effect.BevelWidth = 2; effect.EdgeProfile = EdgeProfile.BulgedUp;
                        sm.RTFNoteBtn.BitmapEffect = effect;

                        // Adds an 'autogenerated' line to the session CSV
                        sm.AutoSaveNote(sm.rtfNoteName);
                        Logger.record("\t\t[save_Click]: RTF Note saved: " + sm.rtfNoteName, "RTFNote", "info");
                    }
                    catch (Exception ex)
                    {
                        Logger.record("\t\t[save_Click]: EXCEPTION reached - RTF Note file could not be saved (" + sm.rtfNoteName + ")", "RTFNote", "error");
                        exDrRetry = Logger.FileErrorMessage(ex, "save_Click", sm.rtfNoteName);
                    }
                } while (exDrRetry);
            }
            Logger.record("[save_Click]: RTF Note saving mechanism done. Will close (hide).", "RTFNote", "info");
            // We not really 'close' the window. Close function deals with whether hiding or closing it.
            this.Close();
            Logger.record("[save_Click]: RTF Note saving mechanism done. Closed (hidden).", "RTFNote", "info");
        }

        // Always hide the window. Unless the app is being closed completely, then close too.
        //  When hidding the window, toggle the button status on the main Widget.
        private void RTFNoteDialog_Close(object sender, CancelEventArgs e)
        {
            Logger.record("[RTFNoteDialog_Close]: Close function called with force flag = " + forceClose.ToString(), "RTFNote", "info");

            Logger.record("[RTFNoteDialog_Close]: Toggling button state", "RTFNote", "info");
            sm.RTFNoteBtn.IsChecked = false;

            // The only way I found to control on how to cancel the closing or not, was by using an external flag.
            if (forceClose != true)
            {
                // Apparently, there is an exception in some machines when closing the app and/or RTF
                //  we try to catch it here.
                //  Bug report: [94adb64c91]
                try
                {
                    Logger.record("\t[RTFNoteDialog_Close]: Hiding RTF Note window", "RTFNote", "info");
                    Logger.record("\t[RTFNoteDialog_Close]: Hiding RTF Note window - Step 1: _isClosing = false...", "RTFNote", "info");
                    typeof(Window).GetField("_isClosing", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(this, false);
                    Logger.record("\t[RTFNoteDialog_Close]: Hiding RTF Note window - Step 2: e.Cancel = true...", "RTFNote", "info");
                    e.Cancel = true; // Abort the close event
                    Logger.record("\t[RTFNoteDialog_Close]: Hiding RTF Note window - Step 3: this.Hide...", "RTFNote", "info");
                    this.Hide(); // Hide is throwing an exception:
                    // "Cannot set visibility or call show, showdialog, close, or hide while window is closing"
                    //  Step 1 is supposed to overcome this exception. Hopefully.

                    Logger.record("\t[RTFNoteDialog_Close]: Hiding RTF Note window - Step 3: this.Hide finished", "RTFNote", "info");
                }
                catch (Exception ex)
                {
                    Logger.record("\t[RTFNoteDialog_Close]: EXCEPTION reached - RTF Note closing could not be cancelled", "RTFNote", "error");
                    System.Windows.Forms.MessageBox.Show(
                        "Hi! An error occured when trying to hide the rich text extended note window.\n" +
                        "Although this does not happen often, it was seen a few times and is under investigation.\n" +
                        "This is a very annoying bug. Meanwhile, let me suggest a way to bypass the problem:\n" +
                        " -- Instead of closing the extended note window (by Alt-F4 or clicking 'X'),\n" +
                        " --    try hiding it by pressing the 'N' button again in the main (golden) window.\n\n" +
                        "Your feedback is very important, please contact us and report the problem if you can/want.\n\n" +
                        "Exception details:\n" +
                        ex.Message,
                        "Framework Error: RTFNote_Closed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else // forceClose == true;
            {
                // Let the window close normally
                Logger.record("\t[RTFNoteDialog_Close]: Closing RTF Note window completely", "RTFNote", "info");
            }
            Logger.record("[RTFNoteDialog_Close]: Close function finished", "RTFNote", "info");
        }
    }
}
